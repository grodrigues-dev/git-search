import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.scss'
import { useEffect, useState } from 'react';
import axios from 'axios';
import { User } from '@/types'
import Modal from '@/components/modal';
import { Loader, ModalContainer } from '@/components/styles';

export default function Home() {
  const [search, setSearch] = useState('');
  const [emptyMessage, setEmptyMessage] = useState(false);
  const [users, setUsers] = useState<User[]>([]);
  const [showModal, setShowModal] = useState(false);
  const [userModal, setUserModal] = useState('');
  const [showLoader, setShowLoader] = useState(false);
  const [pages, setPages] = useState(0);
  const [actualPage, setActualPage] = useState(1);

  const searchByEnter = (event: KeyboardEvent) => {
    if (event.key === 'Enter' && search) {
      handleSearch(1);
    }
  }

  const dispatchModal = (user: string) => {
    setUserModal(user);
    setShowModal(true);
  }

  const handleSearch = (pageNumber = 1) => {
    setShowLoader(true);
    setActualPage(pageNumber);
    axios.get(`https://api.github.com/search/users?q=${search}&page=${pageNumber}`).then(res => {
      setEmptyMessage(Boolean(!res.data.items.length));
      setUsers(res.data.items);
      const totalPages = Math.ceil(res.data.total_count / 30);
      setPages(totalPages > 34 ? 34 : totalPages);
    }).catch(() => {
      window.alert('erro ao consultar api');
    }).finally(() => {
      setShowLoader(false);
    })
  }

  const nextPage = (index: number) => {
    const pageNumber = actualPage + index;
    handleSearch(pageNumber);
  }

  return (
    <>
      <Head>
        <title>Create Next </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Image
          className={styles.logo}
          src="/github.png"
          alt="Github Logo"
          width={330}
          height={165}
        />
        <div className={styles.input}>
          <label htmlFor='search'>
            <Image
              src="/search.png"
              alt="search icon"
              width={15}
              height={15}
            />
          </label>
          <input type="text" id='search' value={search} onChange={(e) => setSearch(e.target.value)} onKeyUp={(e: any) => searchByEnter(e)} />
        </div>
        <button className={`${styles.buttonSearch} ${!search && styles.buttonDisable}`} onClick={()=> handleSearch(1)} disabled={!search}>Pesquisar</button>
        <div className={styles.userContainer}>
          {users.map(user => {
            return (
              <div className={styles.user} key={user.login}>
                <Image
                  src={user.avatar_url}
                  alt={`${user.login} avatar`}
                  width={100}
                  height={100}
                />
                <div>
                  <p>{user.login} | <a href={user.html_url}>link do perfil</a></p>
                  <button onClick={() => dispatchModal(user.login)}>Detalhes do usuário</button>
                </div>
              </div>
            )
          })}
        </div>
        {

          users.length > 0 &&
          <div className={styles.paginationContainer}>
            <div>
              <button style={{ background: actualPage === 1 ? '#CCC' : '#2DA44E' }} onClick={() => nextPage(-1)} disabled={actualPage === 1}> {'<'} </button>
              <p>{actualPage}</p>
              <button style={{ background: actualPage === pages ? '#CCC' : '#2DA44E' }} onClick={() => nextPage(1)} disabled={actualPage === pages}> {'>'} </button>
            </div>
            <p>Total de páginas: {pages} </p>
          </div>
        }
        {
          emptyMessage && <h2 className={styles.emptyMessage}>Desculpe, não conseguimos localizar o usuário :/</h2>
        }
        {
          showModal && <Modal user={userModal} closeModal={() => setShowModal(false)} />
        }
        {
          showLoader &&
          <ModalContainer>
            <Loader></Loader>
          </ModalContainer>
        }
      </main>
    </>
  )
}
